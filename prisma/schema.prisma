// This is your Prisma schema file,// learn more about it in the docs: https://pris.ly/d/prisma-schemagenerator 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Fornecedor {
  id             Int     @id @default(autoincrement())
  nomeFantasia   String
  fornecedorCNPJ String  @unique
  razaoSocial    String
  endereco       String
  transportadora Boolean
  fornecedor     Boolean

  Entrega                  Entrega[]
  FornecedorProduto        FornecedorProduto[]
  FornecedorTransportado   TransportadoraFornecedor[] @relation("Fornecedor")
  TransportadoraFornecedor TransportadoraFornecedor[] @relation("Transportadora")

  @@map("fornecedores")
}

model TransportadoraFornecedor {
  id Int @id @default(autoincrement())

  fornecedorId Int
  Fornecedor   Fornecedor @relation("Fornecedor", fields: [fornecedorId], references: [id])

  transportadoraId         Int
  FornecedorTransportadora Fornecedor @relation("Transportadora", fields: [transportadoraId], references: [id])

  Entrega Entrega[]

  @@unique([fornecedorId, transportadoraId])
  @@map("transportadorasFornecedores")
}

model TesteQualidade {
  id        Int    @id @default(autoincrement())
  nomeTeste String

  QualidadeProduto  QualidadeProduto[]
  EntregaDesprovada EntregaDesaprovada[]

  @@map("testesQualidades")
}

model Produto {
  id          Int     @id @default(autoincrement())
  nomeProduto String
  unidade     String?

  FornecedorProduto FornecedorProduto[]
  EntregaProduto    EntregaProduto[]
  QualidadeProduto  QualidadeProduto[]

  @@map("produtos")
}

model QualidadeProduto {
  obrigatorio Boolean @default(true)

  testeQualidadeId Int
  TesteQualidade   TesteQualidade @relation(fields: [testeQualidadeId], references: [id])

  produtoId Int
  Produto   Produto @relation(fields: [produtoId], references: [id])

  @@id([testeQualidadeId, produtoId])
  @@map("qualidadeProdutos")
}

model FornecedorProduto {
  fornecedorId Int
  Fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id])

  produtoId Int
  Produto   Produto @relation(fields: [produtoId], references: [id])

  @@id([produtoId, fornecedorId])
  @@map("fornecedorProdutos")
}

model Entrega {
  id             Int       @id @default(autoincrement())
  tipoFrete      String
  formaPagamento String
  nfe            String?   @unique
  numeroPedido   String?   @unique
  etapaEntrega   String?
  dataEntrega    DateTime?

  fornecedorId Int?
  Fornecedor   Fornecedor? @relation(fields: [fornecedorId], references: [id])

  transportadoraId Int?
  Transportadora   TransportadoraFornecedor? @relation(fields: [transportadoraId], references: [id])

  StatusEntrega      StatusEntrega[]
  EntregaProduto     EntregaProduto[]
  EntregaDesaprovada EntregaDesaprovada[]

  @@map("entregas")
}

model EntregaDesaprovada {
  id     Int    @id @default(autoincrement())
  motivo String

  testeQualidadeId Int?
  TesteQualidade   TesteQualidade? @relation(fields: [testeQualidadeId], references: [id])

  entregaId Int
  Entrega   Entrega @relation(fields: [entregaId], references: [id])

  @@map("entregasDesaprovadas")
}

model EntregaProduto {
  id            Int     @id @default(autoincrement())
  quantidade    Int?
  pesoPrevisto  Float?
  pesoReal      Float?
  especificacao String?

  produtoId Int
  Produto   Produto @relation(fields: [produtoId], references: [id])

  EntregaId Int
  Entrega   Entrega @relation(fields: [EntregaId], references: [id])

  @@map("entregaProdutos")
}

model TipoUsuario {
  id          Int    @id @default(autoincrement())
  tipoUsuario String

  Usuario Usuario[]

  @@map("tiposUsuarios")
}

model Usuario {
  id             Int      @id @default(autoincrement())
  nome           String
  login          String
  senha          String
  cpf            String
  matricula      String   @unique
  dataNascimento DateTime

  tipoUsuarioId Int?
  TipoUsuario   TipoUsuario? @relation(fields: [tipoUsuarioId], references: [id])

  StatusEntrega StatusEntrega[]

  @@map("usuarios")
}

model StatusEntrega {
  id           Int     @id @default(autoincrement())
  etapaEntrega String?
  aprovado     Boolean

  entregaId Int
  Entrega   Entrega @relation(fields: [entregaId], references: [id])

  usuarioId Int?
  Usuario   Usuario? @relation(fields: [usuarioId], references: [id])

  @@map("statusEntregas")
}
